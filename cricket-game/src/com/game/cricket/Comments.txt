/*
    public static int getCurrBallRun() {
        List<Integer> list = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, -1);
        Random random = new Random();
        int index = random.nextInt(list.size());
        int int_random = list.get(index);

    }


    public int getRuns(){
        List<Integer> list = Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, -1);
        int total_run =0;
        Random random=new Random();
        int index = random.nextInt(list.size());
        int int_random = list.get(index);

        while (int_random != -1) {
            total_run+=int_random;
            System.out.println("Run at Ball : " + int_random);
            index = random.nextInt(list.size());
            int_random = list.get(index);
        }
        System.out.println("Out with total run: "+ total_run);

    }
    */
    //players = Arrays.asList(new Player("Shaswat", "Srivastava", 30, "Batsman"),
        //                new Player("Amitesh", "Srivastava", 29, "Batsman")
        //        );



/*

    public Player getBowlingPlayer(Team team, int n) {
        if (n >= team.getPlayers().size()) {
            return team.getPlayers().get(n % team.getPlayers().size());
        }
        return team.getPlayers().get(n);
    }



    public void allPlayerOut(Team batting_team) {
        Team team = batting_team;

        int persons = 0;
        for (Player player : team.getPlayers()) {
            singlePlayerMatch(player, persons,team,this.team2);
        }
        System.out.println("Final Score is: " + team.getTotal_score());
    }

     */





    /*
     //TODO - Eliminate Function Redundancy


         public void secondHalfMatch(Team batting_team, Team bowling_team, int chaseScore) {
             RandomGenerator randomGenerator = new RandomGenerator();

             //Immutable List
             List<Integer> list = Arrays.asList(0, 1, 2, 3, 4, 6, -1);

             int totalScoreTeam = batting_team.getTotal_score();

             int currBatsman = 0;
             List<Player> batting_players = batting_team.getPlayers();

             int currBowler = 0;
             List<Player> bowling_players = bowling_team.getPlayers();

             Player batting = batting_players.get(currBatsman);
             currBatsman++;
             Player running = batting_players.get(currBatsman);
             Player neutral;

             while (currBatsman <= Team.TEAM_SIZE - 1) {
                 System.out.println("Initial On Batting Side : " + batting.getFirstName());
                 System.out.println("Initial On Running Side : " + running.getFirstName());

                 Bowler bowler = bowling_players.get(currBowler).getBowler();

                 System.out.println("Bowler Bowling: " + bowling_players.get(currBowler).getFirstName());

                 for (int i = bowler.getCurrBall(); i < BALLS_IN_A_OVER; ++i) {

                     int index = randomGenerator.getRandomRun(list.size());
                     int int_random = list.get(index);

                     if (int_random != -1) {

                         totalScoreTeam += int_random;
                         batting_team.setTotal_score(totalScoreTeam);

                         batting.getBatsman().setRun(int_random);
                         bowler.setRun(int_random);
                         bowler.setCurrBall(bowler.getCurrBall() + 1);

                         if (int_random % 2 != 0) {
                             neutral = batting;
                             batting = running;
                             running = neutral;
                         }
                         System.out.println("Run at Ball " + (int) (i + 1) + ": " + int_random);
                         System.out.println("After ball On Batting Side : " + batting.getFirstName());
                         System.out.println("After ball On Running Side : " + running.getFirstName());

                         if (batting_team.getTotal_score() > chaseScore)
                             return;
                         //TODO In second half don't add the total runs to the batting player side(if run by wicket).

                     } else {
                         bowler.setWicket(bowler.getWicket() + 1);
                         System.out.println(bowler.getOvers());

                         System.out.println(bowler.getTotalRuns());
                         batting.getBatsman().setOut(true);

                         bowler.setCurrBall(bowler.getCurrBall() + 1);

                         System.out.println("Out at Ball: " + bowler.getCurrBall());
                         System.out.println("Out with total run: " + batting.getBatsman().getTotalRun());

                         running.getBatsman().getTotalRun();
                         currBatsman++;

                         if (!batting_team.isLastPlayer(currBatsman)) {
                             batting = batting_players.get(currBatsman);
                         }
                         break;
                     }

                 }
                 if (bowler.getCurrBall() == BALLS_IN_A_OVER) {
                     System.out.println("Over Changing---------");

                     bowler.setCurrBall(0);
                     currBowler++;
                     currBowler = getValidBowler(bowling_players, currBowler);
                     neutral = batting;
                     batting = running;
                     running = neutral;
                 }

             }
         }
        */


        /*

        System.out.println("Adding first Team to the match");
        System.out.println("-------------------------");
        System.out.print("Team Id: ");
        String teamId = scan.nextLine();
        System.out.print("Team Name: ");
        String teamName = scan.nextLine();
        Team team = new Team(teamId, teamName);
        team.addPlayers(scan);
        this.team1 = team;
        System.out.println("Congratulations First Team has been added to the match ");
        System.out.println("-------------------------");

         */


        /*
                System.out.println("Adding Second Team to the match");
                System.out.println("-------------------------");
                System.out.print("Team Id: ");
                String teamId = scan.nextLine();
                System.out.print("Team Name: ");
                String teamName = scan.nextLine();
                Team team = new Team(teamId, teamName);
                team.addPlayers(scan);
                this.team2 = team;
                System.out.println("Congratulations Second Team has been added to the match ");
                System.out.println("-------------------------");

                 */




        /*
        secondHalfMatch(team2, team1, team1.getTotal_score());
        System.out.println("Score by Team 2: " + team2.getTotal_score());
        if (team2.getTotal_score() > team1.getTotal_score()) {
            System.out.println("Team 2 WON");
        } else {
            System.out.println("Team 1 WON");
        }
         */



